(define test-hash
  '(:a 12
       :b 13
       :c (lambda (x y) (+ x y))
       )
  )

;; return key list of hash table
(define hash-keys 
  (lambda (hash)
    (cond
     ((eq hash '()) 
      '()
      )
     (1
      (cons 
       (car hash)
       (hash-keys
        (cdr (cdr hash))
        )
       )
      )
     )
    )
  )
;; get value according to key
(define hash-get
  (lambda (x key) 
    (cond
     ((eq x '())
      'undefined
      )
     ((eq (car x) key)
      (ref x 1)
      )
     (1
      (hash-get (cdr (cdr x)) key)
      )
     )
      )
  )

;; set hash key - value
;; ==
(define hash-set
  (lambda (x key value)
    (define hash-set-iter 
      (lambda (x x_copy key value count)
        (cond
         ;; it is empty
         ((eq x '())
          (begin
            (push x_copy key)
            (push x_copy value)
            x_copy
            )
          )
         ;; found existed key
         ((eq (car x) key)
          (set-ref! x 1 value)
          )
         (1
          (hash-set-iter
           (cdr (cdr x)) x_copy key value (+ count 1)
           )
          )
         )
        )
      )
    (hash-set-iter x x key value 0)
      )
  )

;; check x is in y or not
;; (check-in 1 '(1 2 3)) -> true -> 1
(define check-in
  (lambda (x y)
    (cond
     ((eq y '())
      0
      )
     ((eq x (car y)) 1)
     (1
      (check-in x (cdr y))
      )
     )
      )
  )

(define defun (macro (func-name & rest)
                (define params (car rest))
                (define body (cdr rest))
                @(define ,func-name (lambda ,params 
                                      ,body
                                      )
                   )
                )
  )


(display test-hash)
(hash-set test-hash ':test '(
                             :test1 12
                                    :test2 13
                                    :test4 14
                             )
          )
(hash-set (hash-get test-hash ':test) ':test1 112)

(display test-hash)
(display (macroexpand '(defun add (a b) (+ a b) )))
