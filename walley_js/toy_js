#!/usr/bin/env node
var fs=require("fs")
var toy=require("./toy.js")
var toy_vm = require("./toy_vm.js")
var vm=require("vm")
var util=require("util")
var readline = require('readline')
var argv = process.argv
console.log(argv)

// read file and return array
var file_read = function(file_name){
    var content_in_file=fs.readFileSync(file_name,"utf8")   
    return content_in_file.split('\n')
}

// write string to file
var file_write = function(file_name, write_line){
    fs.writeFile(file_name, write_line, function(err) {
        if(err) {
            console.log(err);
        } else {
            //console.log("The file was saved!");
        }
    }); 
}
// REPL
if (argv.length==2){
	
	console.log("Interactive mode");
	console.log("Press Ctrl + C to quit\n");

	var input_str=""

	var rl = readline.createInterface({
	  input: process.stdin,
	  output: process.stdout
	})

	rl.setPrompt('toy> ')
	rl.prompt()

	var to_run=""
	var env = toy.ENV_LIST
	rl.on('line', function(line) {
		toy.display( toy.TOY_Eval(line,toy.ENV_LIST,"") )
		rl.setPrompt('toy> ')
		rl.prompt()
	})

	rl.on('close', function() {
	  console.log('Quit walley')
	  process.exit(0)
	});
	
}
// test running time 
else if (argv.length==3 && argv[2]==='test'){
	console.log("Test mode");
	console.log("Press Ctrl + C to quit\n");

	var input_str=""

	var rl = readline.createInterface({
	  input: process.stdin,
	  output: process.stdout
	})

	rl.setPrompt('toy> ')
	rl.prompt()

	var to_run=""
	var env = toy.ENV_LIST
	rl.on('line', function(line) {
		var start = new Date().getTime()
		
		toy.display(toy.TOY_Eval(line,toy.ENV_LIST,""))

		var end = new Date().getTime()
		console.log("Time collapse: "+(end-start) + " ms")

		rl.setPrompt('toy> ')
		rl.prompt()
	})

	rl.on('close', function() {
	  console.log('Quit walley')
	  process.exit(0)
	});
}
else if (argv.length == 3 && argv[2] === 'vm'){
	
	var rl = readline.createInterface({
	  input: process.stdin,
	  output: process.stdout
	})

	rl.setPrompt('toy> ')
	rl.prompt()

	var Embed_Function = toy_vm.Embed_Function
	var offset = toy_vm.generateOffset(Embed_Function)
	var symbol_table = toy_vm.generateSymbolTable(Embed_Function)
	var ENV = toy_vm.generateEnv(Embed_Function)

	rl.on('line', function(line) {
		var token_list = toy_vm.Tokenize_String(line)
		var parsedObj = toy_vm.parseStringToArray(token_list)
		
		// console.log(parsedObj)

		var Instructions = []
		toy_vm.Toy_Compiler(parsedObj[0], "", Instructions, offset, symbol_table)

		toy_vm.printInstructions(Instructions)

		toy_vm.Toy_VM(Instructions, ENV)

		rl.setPrompt('toy> ')
		rl.prompt()
	})

	rl.on('close', function() {
	  console.log('Quit walley')
	  process.exit(0)
	});
}
// run file
else if (argv.length==3){
	var file_name = argv[2]
	if (typeof(file_name)=="undefined"){
		console.log("No input file..")
		process.exit(0)
	}
	// get content of file
	var content_in_file=fs.readFileSync(file_name,"utf8")
	// eval
	toy.TOY_Eval(content_in_file,toy.ENV_LIST,"")
}
/*
// show env
else if (argv.length==4 && argv[2]=="env"){
	var file_name = argv[3]
	if (typeof(file_name)=="undefined"){
		console.log("No input file..")
		process.exit(0)
	}
	// get content of file
	var content_in_file=fs.readFileSync(file_name,"utf8")
	// parse
	var parsed_obj = toy.parseString(content_in_file)
	// run string
	var env = toy.toy_language(parsed_obj, toy.ENV_LIST ,"" )
	toy.printArray(env)
}
*/

// COMPRESS
else if (argv.length == 4 && argv[2] == "compress"){
	var file_name = argv[3]
	var content_in_file = fs.readFileSync(file_name,"utf8")
	console.log(content_in_file)
	var parsedObj = toy.parseString(content_in_file)
	toy.printArray(parsedObj)
	console.log("\n\n\n\n            ========\n\n\n\n")
	toy.display_(parsedObj)
	console.log("\n\n Done...")
}



