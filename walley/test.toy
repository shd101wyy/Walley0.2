(begin

	; this function can be used to find specific part from atom
	(define atom-find (lambda (_atom_ find_string)
		; Hello He -> 1
		; Hello Ha -> 0
		(define atom-find-test (lambda (_atom_ find_string)
			(if (null? find_string) 1 
				(if (not (eq (car _atom_) (car find_string) ))  
					0
					(atom-find-test (cdr _atom_) (cdr find_string))
					)
				)
			))
		(define atom-find-iter (lambda (_atom_  count)
			(if (null? _atom_) 
				-1 
				(if (atom-find-test _atom_ find_string)
					count
					(atom-find-iter (cdr _atom_) (+ count 1))
					)
				 )
			))
		(atom-find-iter _atom_ 0)
		))

	(define atom-slice (lambda (_atom_ start end)
		; get _atom_[ start : length of _atom_ ]
		(define atom-slice-ahead (lambda (result count)
			(if (eq count start) result (atom-slice-ahead (cdr result) (+ count 1)))
			))
		(define atom-slice-back (lambda (_atom_ result count)
			(if (eq count end) result (atom-slice-back (cdr _atom_) (cons (car _atom_) result) (+ count 1)))
			))

		(let 
			(
				(ahead (atom-slice-ahead _atom_ 0))
				(after (atom-slice-back ahead '() start))
			)
				(list-reverse after)
			) 

		))

	(define list-reverse (lambda (_list_)
		(define list-reverse (lambda (_list_ result)
			(if (null? _list_) result (list-reverse (cdr _list_) (cons (car _list_) result) ))
			))
		(list-reverse _list_ '())
		))


	(define toy_eval (lambda (argument)
		(if (null? argument) nil 
			(let 
				(
					; (+ 3 4) -> +
					; get function name
					(function_name (car argument)) 
					; (+ 3 4) -> (3 4)
					; get function parameters
					(function_params (cdr argument))
				)
				(apply function_name function_params)
			)
		)))
	(display (toy_eval '(+ 3 4)))
	(display (atom-find 'Hello 'lo))
	(display (atom-slice 'Hello 0 2))
	(display (atom-slice '(1 2 6 4) 0 3))
	(display (list-reverse '(1 (2 3) 3)))

	; convert atom to list
	; (atom->list 'Hello)  -> (H e l l o)
	(define atom->list (lambda (atom)
		(define atom->list-iter (lambda (atom result)
			(if (null? atom) result (atom->list-iter (cdr atom) (cons (car atom) result)))
			))
		(list-reverse (atom->list-iter atom '()))
		))
	(display (atom->list 'Hello))



	; check whether char is digit
	(define charIsDigit (lambda (char)
		(if (or (eq char 0) (eq char 1) (eq char 2) (eq char 3) (eq char 4) (eq char 5) (eq char 6) (eq char 7) (eq char 8)  (eq char 9) )
			1
			0
			)
		))

	; check whether input is integer
	; (isInteger 123) -> 1
	; (isInteger 12.0) -> 0
	; (isInteger 12e3) -> 0 
	(define isInteger (lambda (input)
		(if (null? input) 
			1
			(if (charIsDigit (car input))
				(isInteger (cdr input))
				0
				)
			)
		))
	(define isFloat (lambda (input)
		(define isFloatTest (lambda (input count_of_dot_and_e)
			(if (null? input)
				(if (eq count_of_dot_and_e 1) 1 0)
				(if (> count_of_dot_and_e 1) 0 
					(if (charIsDigit (car input))
						(isFloatTest (cdr input) count_of_dot_and_e)
						(if (or 
								(eq (car input) '.)
								(eq (car input) 'e)
							)
							(isFloatTest (cdr input) (+ count_of_dot_and_e 1))
							0
						)
						)
					)
				)

			))
		(isFloatTest input 0)
		))
	(display "\nTest")
	(display '.)
	(display (charIsDigit '.))
	(display (isInteger 12))
	(display (null? 12.0))
	(display (isFloat 12))














)