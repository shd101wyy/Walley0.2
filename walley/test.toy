(begin
	; check whether match syntax
	(define syntax-match (lambda (const_keywords arg1 test_match)
		; variable_table can be used to save variables and their value
		; (3 4) (stm1 stm2) -> (stm1 3 stm2 4)
		(define syntax-match-iter (lambda (arg1 test_match variable_table)
			; finish
			(if (null? test_match) 
				(if (null? arg1) variable_table 0)
				(if (eq? (car arg1) (car test_match))
					(if (eq? (list-atom-is-member? (car test_match) const_keywords) 1)
						(syntax-match-iter (cdr arg1) (cdr test_match) variable_table)
						0
						)

					(if (eq? (list-atom-is-member? (car test_match) const_keywords) 1)
							0
							(if (eq? '... (car test_match))
								(cons '... (cons arg1 variable_table))
								(syntax-match-iter (cdr arg1) (cdr test_match) (cons (car test_match) (cons (car arg1) variable_table)))
								)
						)
					)
				)
			))
			(syntax-match-iter arg1 (cdr test_match) '())
		))

	; (1 2) (3 4) -> (1 2 3 4)
	(define list-combine (lambda (a b)
		(if (null? a)
			(if (null? b)
				'()
				(cons (car b) (list-combine a (cdr b)))
				)
			(cons (car a) (list-combine (cdr a) b) )
			)
		))
	; transfer syntax
	; eg (syntax-transfer  '(stm1 3 stm2 4) '(+ stm1 stm2)) -> (+ 3 4)
	; (add 3 4) -> (+ 3 4)
	; (syntax-transfer '(... (3 4) stm 1 )) '(+ stm ...) -> (+ 1 3 4)
	(define syntax-transfer (lambda (variable_table transfer)
		(define syntax-transfer-iter (lambda (transfer)
			(if (null? transfer) '()
				; check whether (car transfer) is list
				(if (list? (car transfer))
					; if ahead is list
					(cons (syntax-transfer-iter (car transfer))  (syntax-transfer-iter (cdr transfer)) )
					; check whether (car transfer) is number
					(if (number? (car transfer))
						(cons (car transfer) (syntax-transfer-iter (cdr transfer)) )
						(let 
							((index (list-atom-index (car transfer) variable_table)))
							(if (eq? -1 index )
								(cons (car transfer) (syntax-transfer-iter (cdr transfer)))
								; ... support
								(if (and 
										(not (null? (cdr transfer)))
										(eq? (car (cdr transfer)) '...)
										)
									(cons (list-ref variable_table (+ 1 index)) (list-combine (list-ref variable_table (- index 1)) (syntax-transfer-iter (cdr (cdr transfer))) ))
									(cons (list-ref variable_table (+ 1 index)) (syntax-transfer-iter (cdr transfer)))
									)
								)
							)
						)
					)
				)
			))
		(syntax-transfer-iter transfer)
	))


	; args = [macro_name const_keywords pattern_lists arguments]
	(define getmacro (lambda (args)
		(define VARIABLE_TABLE '())
		(define const_keywords (list-ref args 1))
		(define pattern_lists (list-ref args 2))
		(define arguments (list-ref args 3))
		; assign value to var_name
		; if value is not list
		; return 0
		; else
		; return 1
		(define list?= (lambda (value)
			(if (list? value) 
			  (begin 
			  	(set! VARIABLE_TABLE value)
			  	1
			  	)
			   0)
			))
		(define getmacro-iter (lambda (pattern_lists)
			(if (null? pattern_lists) "Error... Does not match"
				(if (eq? 1 (list?= (syntax-match const_keywords arguments (car (car pattern_lists)) )))
					(syntax-transfer VARIABLE_TABLE (car (cdr (car pattern_lists))))
					(getmacro-iter (cdr pattern_lists))
					)
				)
			))
		(getmacro-iter pattern_lists)
		))

	(defmacro add 
		(and)
		((add stm1 stm2) (+ stm1 stm2))
		)
	(display (add 3 4))
	;(display (syntax-transfer '(judge (== 1 1) stm1 4 stm2 5) '(cond (judge stm1) (1 stm2))))

	;(display (syntax-match '() '((= 2 3) 1 2) '(unless condition stm1 stm2)))
	;(display (syntax-transfer  '(stm2 2 stm1 1 condition (= 2 3)) '(cond (condition stm1) (1 stm2) )  ))
	
	(defmacro if2
		()
		((if2 condition stm1 stm2) (cond (condition stm1) (1 stm2)))
		)
	(display (if2 (= 2 3) 1 2))
	
	;(display (syntax-match '() '(3 4 5 6) '(add stm ...) ))
	;(display (syntax-transfer '(... (3 4 5) stm 2) '(+ stm ...)  ))
	;(display (list-combine '(1 2) '(3 4) ))


	;(define newline (lambda () (display "\n")))
	;(display (list-atom-is-member? 'a '(c a c)))
	;(newline)
	;(display (list-atom-index 'a '(c b b)))
	;(newline)
	;(display (eq? 'a 'a))
	;(newline)
	;(display (syntax-match '(and) '(3 4 and 5) '(add stm1 stm2 and stm3)))
	;(newline)
	;(display (syntax-match '(and) '(3 4 and 7) '(add stm1 stm2 and stm3)) )
	;(newline)
	;(display (syntax-transfer '(stm1 3 stm2 4 stm3 5) '(+ stm1 stm2 and stm3)))

	;(newline)
	;(display (apply add-macro '(3 4 and2 7)))




	;(display (add 3 4 5 7))
)