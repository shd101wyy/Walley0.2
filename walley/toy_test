#!/usr/bin/env python
# toy language simple repl

from toy import *

ENV = [['/_array', ['lambda', ['list'], ['/_array_iter', ['cdr', 'list'], ['car', 'list']]]], ['/_array_iter', ['lambda', ['list', 'result'], ['cond', [['null?', 'list'], 'result'], [['quote', '1'], ['/_array_iter', ['cdr', 'list'], ['$/$', 'result', ['car', 'list']]]]]]], ['*_array', ['lambda', ['list'], ['*_array_iter', ['cdr', 'list'], ['car', 'list']]]], ['*_array_iter', ['lambda', ['list', 'result'], ['cond', [['null?', 'list'], 'result'], [['quote', '1'], ['*_array_iter', ['cdr', 'list'], ['$*$', 'result', ['car', 'list']]]]]]], ['-_array', ['lambda', ['list'], ['cond', [['null?', ['cdr', 'list']], ['cons', ['quote', '-'], ['car', 'list']]], [['quote', '1'], ['-_array_iter', ['cdr', 'list'], ['car', 'list']]]]]], ['-_array_iter', ['lambda', ['list', 'result'], ['cond', [['null?', 'list'], 'result'], [['quote', '1'], ['-_array_iter', ['cdr', 'list'], ['$-$', 'result', ['car', 'list']]]]]]], ['+_array', ['lambda', ['list'], ['+_array_iter', ['cdr', 'list'], ['car', 'list']]]], ['+_array_iter', ['lambda', ['list', 'result'], ['cond', [['null?', 'list'], 'result'], [['quote', '1'], ['+_array_iter', ['cdr', 'list'], ['$+$', 'result', ['car', 'list']]]]]]], ['$/$', ['lambda', ['num1', 'num2'], ['cond', [['__OR__', ['eq', ['quote', 'Float'], ['typeOfNum', 'num1']], ['eq', ['quote', 'Float'], ['typeOfNum', 'num2']]], ['/', 'num1', 'num2']], [['quote', '1'], ['make_rat_string', ['div-rat', ['format_number', 'num1'], ['format_number', 'num2']]]]]]], ['$*$', ['lambda', ['num1', 'num2'], ['cond', [['__OR__', ['eq', ['quote', 'Fraction'], ['typeOfNum', 'num1']], ['eq', ['quote', 'Fraction'], ['typeOfNum', 'num2']]], ['make_rat_string', ['mul-rat', ['format_number', 'num1'], ['format_number', 'num2']]]], [['quote', '1'], ['*', 'num1', 'num2']]]]], ['$-$', ['lambda', ['num1', 'num2'], ['cond', [['__OR__', ['eq', ['quote', 'Fraction'], ['typeOfNum', 'num1']], ['eq', ['quote', 'Fraction'], ['typeOfNum', 'num2']]], ['make_rat_string', ['sub-rat', ['format_number', 'num1'], ['format_number', 'num2']]]], [['quote', '1'], ['-', 'num1', 'num2']]]]], ['$+$', ['lambda', ['num1', 'num2'], ['cond', [['__OR__', ['eq', ['quote', 'Fraction'], ['typeOfNum', 'num1']], ['eq', ['quote', 'Fraction'], ['typeOfNum', 'num2']]], ['make_rat_string', ['add-rat', ['format_number', 'num1'], ['format_number', 'num2']]]], [['quote', '1'], ['+', 'num1', 'num2']]]]], ['number?', ['lambda', ['input_str'], ['number?_accordint_to_type', ['typeOfNum', 'input_str']]]], ['number?_accordint_to_type', ['lambda', ['type'], ['cond', [['eq', 'type', ['quote', 'Float']], ['quote', '1']], [['eq', 'type', ['quote', 'Fraction']], ['quote', '1']], [['eq', 'type', ['quote', 'Integer']], ['quote', '1']], [['quote', '1'], ['quote', '0']]]]], ['typeOfNum', ['lambda', ['input_str'], ['cond', [['eq', ['car', 'input_str'], ['quote', '-']], ['checkTypeOfNum', ['cdr', 'input_str'], ['quote', '0'], ['quote', '0'], ['quote', '0'], ['quote', '0']]], [['quote', '1'], ['checkTypeOfNum', 'input_str', ['quote', '0'], ['quote', '0'], ['quote', '0'], ['quote', '0']]]]]], ['checkTypeOfNum', ['lambda', ['input_str', 'num_of_e', 'num_of_.', 'num_of_/', 'hasDigit'], ['cond', [['null?', 'input_str'], ['cond', [['eq', 'hasDigit', ['quote', '0']], ['quote', 'Unknown_or_Invalid']], [['eq', 'num_of_/', ['quote', '1']], ['cond', [['eq', 'num_of_e', ['quote', '0']], ['cond', [['eq', 'num_of_.', ['quote', '0']], ['quote', 'Fraction']], [['quote', '1'], ['quote', 'Unknown_or_Invalid']]]], [['quote', '1'], ['quote', 'Unknown_or_Invalid']]]], [['__AND__', ['eq', 'num_of_/', ['quote', '0']], ['__AND__', ['eq', 'num_of_e', ['quote', '0']], ['eq', 'num_of_.', ['quote', '0']]]], ['quote', 'Integer']], [['__OR__', ['eq', 'num_of_e', ['quote', '1']], ['eq', 'num_of_.', ['quote', '1']]], ['quote', 'Float']], [['quote', '1'], ['quote', 'Unknown_or_Invalid']]]], [['eq', ['car', 'input_str'], ['quote', 'e']], ['checkTypeOfNum', ['cdr', 'input_str'], ['+', 'num_of_e', ['quote', '1']], 'num_of_.', 'num_of_/', 'hasDigit']], [['eq', ['car', 'input_str'], ['quote', '.']], ['checkTypeOfNum', ['cdr', 'input_str'], 'num_of_e', ['+', 'num_of_.', ['quote', '1']], 'num_of_/', 'hasDigit']], [['eq', ['car', 'input_str'], ['quote', '/']], ['checkTypeOfNum', ['cdr', 'input_str'], 'num_of_e', 'num_of_.', ['+', 'num_of_/', ['quote', '1']], 'hasDigit']], [['\xe8\xbf\x99\xe4\xb8\xaa\xe6\x95\xb0\xe5\xad\x97\xe6\x98\xaf\xe6\x95\xb4\xe6\x95\xb0', ['car', 'input_str']], ['checkTypeOfNum', ['cdr', 'input_str'], 'num_of_e', 'num_of_.', 'num_of_/', ['quote', '1']]], [['quote', '1'], ['quote', 'Unknown_or_Invalid']]]]], ['\xe8\xbf\x99\xe4\xb8\xaa\xe6\x95\xb0\xe5\xad\x97\xe6\x98\xaf\xe6\x95\xb4\xe6\x95\xb0', ['lambda', ['value'], ['cond', [['eq', 'value', ['quote', '0']], ['quote', '1']], [['eq', 'value', ['quote', '1']], ['quote', '1']], [['eq', 'value', ['quote', '2']], ['quote', '1']], [['eq', 'value', ['quote', '3']], ['quote', '1']], [['eq', 'value', ['quote', '4']], ['quote', '1']], [['eq', 'value', ['quote', '5']], ['quote', '1']], [['eq', 'value', ['quote', '6']], ['quote', '1']], [['eq', 'value', ['quote', '7']], ['quote', '1']], [['eq', 'value', ['quote', '8']], ['quote', '1']], [['eq', 'value', ['quote', '9']], ['quote', '1']], [['quote', '1'], ['quote', '0']]]]], ['format_number', ['lambda', ['num'], ['cons', ['get_numerator', 'num'], ['cons', ['get_denominator', 'num'], ['quote', []]]]]], ['get_denominator', ['lambda', ['num'], ['cond', [['null?', 'num'], ['quote', '1']], [['eq', ['car', 'num'], ['quote', '/']], ['cdr', 'num']], [['quote', '1'], ['get_denominator', ['cdr', 'num']]]]]], ['get_numerator', ['lambda', ['num'], ['cond', [['null?', 'num'], ['quote', '']], [['eq', ['car', 'num'], ['quote', '/']], ['quote', '']], [['quote', '1'], ['cons', ['car', 'num'], ['get_numerator', ['cdr', 'num']]]]]]], ['make_rat_string', ['lambda', ['rat'], ['cons', ['car', 'rat'], ['cons', ['quote', '/'], ['cadr', 'rat']]]]], ['denom', ['lambda', ['x'], ['cadr', 'x']]], ['numer', ['lambda', ['x'], ['car', 'x']]], ['make-rat', ['lambda', ['n', 'd'], ['\xe7\xba\xa6\xe5\x88\x86\xe5\x87\xbd\xe6\x95\xb0\xe6\xa0\xb9\xe6\x8d\xaegcd', 'n', 'd', ['gcd', 'n', 'd']]]], ['\xe7\xba\xa6\xe5\x88\x86\xe5\x87\xbd\xe6\x95\xb0\xe6\xa0\xb9\xe6\x8d\xaegcd', ['lambda', ['n', 'd', 'g'], ['cons', ['removeDot', ['/', 'n', 'g']], ['cons', ['removeDot', ['/', 'd', 'g']], ['quote', []]]]]], ['removeDot', ['lambda', ['num'], ['removeDot_iter', 'num']]], ['removeDot_iter', ['lambda', ['num'], ['cond', [['null?', 'num'], ['quote', '']], [['eq', ['car', 'num'], ['quote', '.']], ['quote', '']], [['quote', '1'], ['cons', ['car', 'num'], ['removeDot_iter', ['cdr', 'num']]]]]]], ['equal-rat?', ['lambda', ['x', 'y'], ['=', ['*', ['numer', 'x'], ['denom', 'y']], ['*', ['denom', 'x'], ['numer', 'y']]]]], ['div-rat', ['lambda', ['x', 'y'], ['make-rat', ['*', ['numer', 'x'], ['denom', 'y']], ['*', ['denom', 'x'], ['numer', 'y']]]]], ['mul-rat', ['lambda', ['x', 'y'], ['make-rat', ['*', ['numer', 'x'], ['numer', 'y']], ['*', ['denom', 'x'], ['denom', 'y']]]]], ['sub-rat', ['lambda', ['x', 'y'], ['make-rat', ['-', ['*', ['numer', 'x'], ['denom', 'y']], ['*', ['numer', 'y'], ['denom', 'x']]], ['*', ['denom', 'x'], ['denom', 'y']]]]], ['add-rat', ['lambda', ['x', 'y'], ['make-rat', ['+', ['*', ['numer', 'x'], ['denom', 'y']], ['*', ['numer', 'y'], ['denom', 'x']]], ['*', ['denom', 'x'], ['denom', 'y']]]]], ['gcd', ['lambda', ['a', 'b'], ['cond', [['__EQUAL__', 'b', ['quote', '0']], 'a'], [['quote', '1'], ['gcd', 'b', ['remainder', 'a', 'b']]]]]], ['remainder', ['lambda', ['a', 'b'], ['cond', [['__LT__', 'a', 'b'], 'a'], [['quote', '1'], ['remainder', ['-', 'a', 'b'], 'b']]]]], ['toy', ['lambda', ['expr', 'env', 'module_name'], ['cond', [['number?', 'expr'], ['cons_env', 'expr', 'env']], [['atom?', 'expr'], ['cons', ['assoc', 'expr', 'env'], ['cons', 'env', ['quote', []]]]], [['atom?', ['car', 'expr']], ['cond', [['eq', ['car', 'expr'], ['quote', 'quote']], ['cons', ['cadr', 'expr'], ['cons', 'env', ['quote', []]]]], [['eq', ['car', 'expr'], ['quote', 'atom?']], ['cons_env', ['atom?', ['car', ['toy', ['cadr', 'expr'], 'env', 'module_name']]], 'env']], [['eq', ['car', 'expr'], ['quote', 'eq']], ['cons_env', ['eq', ['car', ['toy', ['cadr', 'expr'], 'env', 'module_name']], ['car', ['toy', ['caddr', 'expr'], 'env', 'module_name']]], 'env']], [['eq', ['car', 'expr'], ['quote', 'car']], ['cons_env', ['car', ['car', ['toy', ['cadr', 'expr'], 'env', 'module_name']]], 'env']], [['eq', ['car', 'expr'], ['quote', 'cdr']], ['cons_env', ['cdr', ['car', ['toy', ['cadr', 'expr'], 'env', 'module_name']]], 'env']], [['eq', ['car', 'expr'], ['quote', 'cons']], ['cons_env', ['cons', ['car', ['toy', ['car', ['cdr', 'expr']], 'env', 'module_name']], ['car', ['toy', ['car', ['cdr', ['cdr', 'expr']]], 'env', 'module_name']]], 'env']], [['eq', ['car', 'expr'], ['quote', 'cond']], ['eval_cond', ['cdr', 'expr'], 'env', 'module_name']], [['eq', ['car', 'expr'], ['quote', 'define']], ['define_procedure', ['var_name_update', ['cadr', 'expr'], 'module_name'], ['caddr', 'expr'], 'env', 'module_name']], [['eq', ['car', 'expr'], ['quote', 'set!']], ['set!_procedure', ['cadr', 'expr'], ['toy', ['caddr', 'expr'], 'env', 'module_name']]], [['eq', ['car', 'expr'], ['quote', 'lambda']], ['cons_env', 'expr', 'env']], [['eq', ['car', 'expr'], ['quote', 'begin']], ['eval_begin', ['cdr', 'expr'], 'env', 'module_name']], [['eq', ['car', 'expr'], ['quote', 'let']], ['let_procedure', ['toy', ['caddr', 'expr'], ['eval_let', ['cadr', 'expr'], 'env', 'module_name'], 'module_name'], 'env']], [['eq', ['car', 'expr'], ['quote', 'apply']], ['toy', ['cons', ['cadr', 'expr'], ['cdr', ['cdr', 'expr']]], 'env', 'module_name']], [['eq', ['car', 'expr'], ['quote', 'eval']], ['toy', ['car', ['toy', ['cadr', 'expr'], 'env', 'module_name']], 'env', 'module_name']], [['quote', '1'], ['procedure_procedure', ['car', 'expr'], ['cdr', 'expr'], 'env', 'module_name']]]], [['eq', ['caar', 'expr'], ['quote', 'lambda']], ['lambda_procedure', ['toy', ['caddr', ['car', 'expr']], ['append', ['pair_params', ['cadr', ['car', 'expr']], ['cdr', 'expr'], 'env', 'module_name'], 'env'], 'module_name'], 'env', 'module_name']]]]], ['eval_cond', ['lambda', ['expr', 'env', 'module_name'], ['cond', [['car', ['toy', ['caar', 'expr'], 'env', 'module_name']], ['toy', ['cadar', 'expr'], 'env', 'module_name']], [['quote', '1'], ['eval_cond', ['cdr', 'expr'], 'env', 'module_name']]]]], ['lambda_procedure', ['lambda', ['return_obj', 'env', 'module_name'], ['deal_with_return_obj_for_lambda_procedure', ['car', 'return_obj'], ['cadr', 'return_obj'], 'env']]], ['deal_with_return_obj_for_lambda_procedure', ['lambda', ['return_value', 'return_env', 'env'], ['cons', 'return_value', ['cons', ['restore_env', 'env', 'return_env', 'return_env'], ['quote', []]]]]], ['pair_params', ['lambda', ['names', 'params', 'env', 'module_name'], ['cond', [['null?', 'names'], ['quote', []]], [['eq', ['car', 'names'], ['quote', '.']], ['cons', ['cons', ['cadr', 'names'], ['cons', ['evlis', 'params', 'env', 'module_name'], ['quote', []]]], ['quote', []]]], [['eq', ['car', 'names'], ['quote', '&']], ['cons', ['cons', ['cadr', 'names'], ['cons', 'params', ['quote', []]]], ['quote', []]]], [['quote', '1'], ['cons', ['cons', ['car', 'names'], ['cons', ['car', ['toy', ['car', 'params'], 'env', 'module_name']], ['quote', []]]], ['pair_params', ['cdr', 'names'], ['cdr', 'params'], 'env', 'module_name']]]]]], ['evlis', ['lambda', ['params', 'env', 'module_name'], ['cond', [['null?', 'params'], ['quote', []]], [['quote', '1'], ['cons', ['car', ['toy', ['car', 'params'], 'env', 'module_name']], ['evlis', ['cdr', 'params'], 'env', 'module_name']]]]]], ['procedure_procedure', ['lambda', ['func_name', 'params', 'env', 'module_name'], ['cond', [['null?', 'env'], ['display', ['cons', ['quote', 'Undefined Function '], 'func_name']]], [['eq', 'func_name', ['car', ['car', 'env']]], ['toy', ['cons', ['cadar', 'env'], 'params'], 'env', 'module_name']], [['quote', '1'], ['procedure_procedure', 'func_name', 'params', ['cdr', 'env'], 'module_name']]]]], ['eval_begin', ['lambda', ['expr', 'env', 'module_name'], ['cond', [['null?', 'expr'], ['display', ['quote', 'Error...begin function params num error']]], [['null?', ['cdr', 'expr']], ['toy', ['car', 'expr'], 'env', 'module_name']], [['quote', '1'], ['eval_begin', ['cdr', 'expr'], ['cadr', ['toy', ['car', 'expr'], 'env', 'module_name']], 'module_name']]]]], ['let_procedure', ['lambda', ['return_obj', 'env'], ['cons', ['car', 'return_obj'], ['cons', ['restore_env', 'env', ['cadr', 'return_obj'], ['cadr', 'return_obj']], ['quote', []]]]]], ['restore_env', ['lambda', ['old_env', 'new_env', 'new_env_copy'], ['cond', [['null?', 'old_env'], ['cond', [['null?', 'new_env'], 'new_env_copy'], [['quote', '1'], ['restore_env', 'old_env', ['cdr', 'new_env'], ['cdr', 'new_env_copy']]]]], [['quote', '1'], ['restore_env', ['cdr', 'old_env'], ['cdr', 'new_env'], 'new_env_copy']]]]], ['eval_let', ['lambda', ['expr', 'env', 'module_name'], ['cond', [['null?', 'expr'], 'env'], [['quote', '1'], ['eval_let', ['cdr', 'expr'], ['cons', ['cons', ['caar', 'expr'], ['cons', ['car', ['toy', ['cadar', 'expr'], 'env', 'module_name']], ['quote', []]]], 'env'], 'module_name']]]]], ['set!_procedure', ['lambda', ['var_name', 'return_obj'], ['cons', ['car', 'return_obj'], ['cons', ['set_index', 'var_name', ['car', 'return_obj'], ['cadr', 'return_obj']], ['quote', []]]]]], ['set_index', ['lambda', ['var_name', 'var_value', 'env'], ['cond', [['null?', 'env'], [['lambda', ['a', 'b'], 'b'], ['display', ['cons', ['cons', ['quote', 'Error...In function set! '], 'var_name'], ['quote', ' does not exist']]], ['quote', []]]], [['eq', 'var_name', ['caar', 'env']], ['cons', ['cons', 'var_name', ['cons', 'var_value', ['quote', []]]], ['cdr', 'env']]], [['quote', '1'], ['cons', ['car', 'env'], ['set_index', 'var_name', 'var_value', ['cdr', 'env']]]]]]], ['define_procedure', ['lambda', ['updated_var_name', 'uncalculated_var_value', 'env', 'module_name'], ['cond', [['var_existed', 'updated_var_name', 'env'], ['display', ['cons', ['cons', ['quote', 'Error '], 'updated_var_name'], ['quote', ' Has already be defined']]]], [['quote', '1'], ['deal_with_return_obj', ['toy', 'uncalculated_var_value', 'env', 'module_name'], 'updated_var_name']]]]], ['deal_with_return_obj', ['lambda', ['return_obj', 'var_name'], ['cons', ['car', 'return_obj'], ['cons', ['cons', ['cons', 'var_name', ['cons', ['car', 'return_obj'], ['quote', []]]], ['cadr', 'return_obj']], ['quote', []]]]]], ['var_name_update', ['lambda', ['var_name', 'module_name'], ['cond', [['eq', 'module_name', ['quote', '']], 'var_name'], [['quote', '1'], ['cons', ['module_name', ['quote', '.']], 'var_name']]]]], ['var_existed', ['lambda', ['var_name', 'env'], ['cond', [['null?', 'env'], ['quote', '0']], [['eq', 'var_name', ['caar', 'env']], ['quote', '1']], [['quote', '1'], ['var_existed', 'var_name', ['cdr', 'env']]]]]], ['cons_env', ['lambda', ['value', 'env'], ['cons', 'value', ['cons', 'env', ['quote', []]]]]], ['toy_language', ['lambda', ['trees', 'env', 'module_name'], ['cond', [['null?', 'trees'], 'env'], [['quote', '1'], ['toy_language', ['cdr', 'trees'], ['cdar', ['toy', ['car', 'trees'], 'env', 'module_name']], 'module_name']]]]], ['assoc', ['lambda', ['x', 'y'], ['cond', [['null?', 'y'], ['display', ['quote', 'Error_Cannot_Find']]], [['eq', ['caar', 'y'], 'x'], ['cadar', 'y']], [['quote', '1'], ['assoc', 'x', ['cdr', 'y']]]]]], ['pair', ['lambda', ['x', 'y'], ['cond', [['and', ['null?', 'x'], ['null?', 'y']], ['quote', []]], [['quote', '1'], ['cons', ['cons', ['car', 'x'], ['cons', ['car', 'y'], ['quote', []]]], ['pair', ['cdr', 'x'], ['cdr', 'y']]]]]]], ['append', ['lambda', ['x', 'y'], ['cond', [['null?', 'x'], 'y'], [['quote', '1'], ['cons', ['car', 'x'], ['append', ['cdr', 'x'], 'y']]]]]], ['null?', ['lambda', ['x'], ['eq', 'x', ['quote', []]]]], ['caddar', ['lambda', ['_list_'], ['car', ['cdr', ['cdr', ['car', '_list_']]]]]], ['caddr', ['lambda', ['_list_'], ['car', ['cdr', ['cdr', '_list_']]]]], ['cadar', ['lambda', ['_list_'], ['car', ['cdr', ['car', '_list_']]]]], ['cdar', ['lambda', ['_list_'], ['cdr', ['car', '_list_']]]], ['caar', ['lambda', ['_list_'], ['car', ['car', '_list_']]]], ['cadr', ['lambda', ['_list_'], ['car', ['cdr', '_list_']]]]]

def repl(prompt="toy > ",env=[],toy_env=[]):
    input_str = raw_input(prompt)
    tree = parser(lexer(input_str)[0])

    toy_base = ['toy',["quote",tree],["quote",toy_env],["quote",""]]
    if tree==["exit"]:
        return
    else:
        return_obj = toy(toy_base,env,"")
        print return_obj[0][0]
        toy_env = return_obj[0][1]
        # new environment
        repl("toy > ",return_obj[1],toy_env)

repl(env=ENV)
#x = "(toy '(define x 12) '() \"\")"
#x = lexer(x)[0]
#x = parser(x)
#print toy(['toy', ['quote', ['define', 'x', '12']], ['quote', []], ['quote', '']],ENV,"")