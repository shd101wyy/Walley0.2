(begin

	; change value at index of _list_
	(define list-set_ (lambda (_list_ value index)
		(define list-set-iter (lambda (_list_ index)
			(if (null? _list_) '()
				(if (eq index 0)
					(cons value (cdr _list_) )
					(cons (car _list_) (list-set-iter (cdr _list_) (- index 1) ))
					)
				)
			))
		(list-set-iter _list_ index)
		))

	; used macro to call function list-set
	(defmacro list-set! 
		() ; no constant keywords
		((list-set! var_name value index) (set! var_name (list-set_ var_name value index)) )
		)


	; Toy Language Object (javscript like) implementation
	; Define an object
	; (key . value)
	(define x '(
		(a . 12)
		(b . 13)
		(c . 14)
		)
	)

	;(display x)
	; get the value of object according to key
	; (define x '((a . b)))
	; (object-get x 'a)  -> b
	(define object-get (lambda (obj key)
		(cond 
			((null? obj) "Error...Cannot find key from object")
			(1 (cond
				(
					(eq key (car (car obj))) 
					(cdr (car obj)) 
					)
				(1 (object-get (cdr obj) key) )
				))
			)
		))
	(define object-get-according-to-keys (lambda (obj . keys)
		(define object-get-according-to-keys_ (lambda (obj keys)
			(if (null? keys)
				obj
				(object-get-according-to-keys_ (object-get obj (car keys)) (cdr keys))
				)
			))
		(object-get-according-to-keys_ obj keys)
		))

	; set value at key of object
	(define object-set_ (lambda (obj key value)
		(define object-set-iter (lambda (obj)
			(if (null? obj) '()
				(if (eq key (car (car obj)))
					; find key
					(cons (cons key value) (cdr obj))
					(cons (car obj) (object-set-iter (cdr obj)) )
					)
				)
			))
			(object-set-iter obj)
		))
	; use macro to change object
	(defmacro object-set! ()
		((object-set! var_name key value)(set! var_name (object-set_ var_name key value)))
		)

	; object macro
	(defmacro object (=)
		; init object
		((object var_name = var_value) (define var_name var_value))
		; get value according to index
		((object var_name key1 ...) (object-get-according-to-keys var_name key1 ... )) 
		)

	(object x = '((a . ((c . 15))) (b . 13)))
	;(display (object-get-according-to-keys '((a . b)) 'a))
	(display (object-get-according-to-keys x 'a 'c))
	

	)
