(stms
	"This program is written by Yiyi Wang to test Toy Language"
	"I recommended u to start the program by stating (stms ) function"


	"list? function will return 1 if it is list"
	(= list? (lambda (a)
			(if (atom? a) 0 1)
		)
	)

	"======================================================================"

	" this is function ^ "
	(= ^ (lambda (a b)
			(if (== b 1) a
				(* a (^ a (- b 1)))
			)
		)
	)
	
	"bind ** to ^"
	(= ** ^)
	"test ** function"
	"(print (** 3 4))"

	"======================================================================"
	"list "
		"list-length"
		"which can be used to get the length of list"
		(= list-length (lambda (_list_)
			(if (list? _list_)
				(if (null? _list_) 0 (+ 1 (list-length (cdr _list_))))
				(print "Error...Function list-length can not be used to get length of non-list type value")
			)
		  )
		)

		"test list-length"
		"(print (list-length '(1 2 3)))"
		"(print (list-length 12))"

		"====================================="
		"list-get"
		"get list at index"
		(= list-get (lambda (_list_ index)
				(if (>= index (list-length _list_))
					(print "Error...Index out of range")
					(if (== index 0)
						(car _list_)
						(list-get (cdr _list_) (- index 1))
					)
				)
			)
		)
		"test list-get"
		"(print (list-get '(12 2 14) 2))"
	"====================="
	"Function: list-append"
	"(list-append '() 12) -> (12)"
	"(list-append '(1 2) '(14 15)) -> (1 2 (14 15))"
	(= list-append (lambda (a b)
			(stms
				(local= output (cons b '()))
				(local= i (- (list-length a) 1))
				(while (>= i 0)
					(stms
						(local= output (cons (list-get a i) output))
						(local= i (- i 1))
					)
				)
				output
			)
		)
	)
	(print (list-append '(1 2) '(14 15) ))

	"==============="
	"Function: Range"
	(= range (lambda (a)
			(if (== 1 (list-length ...))
				(stms
					(local= i 0)
					(local= output '())
					(while (< i a)
						(stms
							(local= output (list-append output i))
							(local= i (+ i 1))
						)
					)
					output
				)
				(if (== 2 (list-length ...))
					(stms
						(local= i a)
						(local= output '())
						(while (< i (eval (list-get .. 0)))
							(stms
								(local= output (list-append output i))
								(local= i (+ i 1))
							)
						)
						output
					)

					(stms
						(local= i a)
						(local= output '())
						(local= max (eval (list-get .. 0)))
						(while (< i max)
							(stms
								(local= output (list-append output i))
								(local= i (+ i (eval (list-get .. 1))))
							)
						)
						output
					)
				)
			)
		)
	)
	"Test"
	(print (range 2 100 0.5))



















)