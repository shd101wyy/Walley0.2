(stms
	;This program is written by Yiyi Wang to test Toy Language"
	;I recommended u to start the program by stating (stms ) function"
	(define display print)
	(define begin stms)
	;# function list"
    ;# (list 1 2 3) ---> (1 2 3)"
    ;Has bug when"
    ; (define x 12) (define x (list 1 x))"
	(define list (lambda (. args) 
		(if (null? args) '() (cons (car args) (apply list (cdr args))))
		)
	)
	
	;Arithmetic Operation"
	;Now only support number, exclude fraction, real, complex"
	;(define + (lambda (. args)
	;	(if (null? args) 0 (__ADD__ (car args) (apply + (cdr args)))
	;		)
	;	)
	;)
	;(define - (lambda (. args)
	;	(if (null? args) 0 (__MINUS__ (car args) (apply - (cdr args)))
	;		)
	;	)
	;)

	;(define * (lambda (. args)
	;	(if (null? args) 1 (__MULT__ (car args) (apply * (cdr args)))
	;		)
	;	)
	;);
	; this function has bug
	;(define / (lambda (. args)
	;	(if (null? args) 1 (__DIV__ (car args) (apply / (cdr args)))
	;		)
	;	)
	;)
	; I stopped writting function + - * / in toy
	(define + __ADD__)
	(define - __MINUS__)
	(define * __MULT__)
	(define / __DIV__)
	(define and __AND__)
	(define or __OR__)

	; convert int or fraction to float
	(define float (lambda (a) (* 1.0 a)))

	(define null? (lambda (a)(if (eq a '()) 1 0)))
	(define empty? null?)

	;Condition judge > < =(==) != >= <=" 
	(define = (lambda (. args)
		(cond ( (__EQUAL__ 2 (len args)) (__EQUAL__ (car args) (car (cdr args))) ) (1 (__AND__ (__EQUAL__ (car args) (car (cdr args))) (apply = (cdr args))) )
			)
		)
	)
	(define == =)
	(define eq? eq)
	(define equal =)
	(define < (lambda (. args)
		(if (= 2 (len args)) (__LT__ (car args) (car (cdr args))) (__AND__ (__LT__ (car args) (car (cdr args))) (apply < (cdr args)) )
			)
		)
	)	
	(define <= (lambda (. args)
		(if (= 2 (len args)) (__OR__ (apply = args) (apply < args)) (__AND__ (__OR__ (apply = (list (car args) (car (cdr args)))) (apply < (list (car args) (car (cdr args))))) (apply <= (cdr args)) )
			)
		)
	)


	;greater"
	(define __GT__ (lambda (a b)(
		if (apply <= (list a b)) 0 1
			)
		)
	)

	(define > (lambda (. args) (
		if (= 2 (len args)) (__GT__ (car args) (car (cdr args))) (__AND__ (__GT__ (car args) (car (cdr args))) (apply > (cdr args)) )
			)
		)
	)

	(define >= (lambda (. args)(
		if (= 2 (len args)) (or (apply = args) (apply > args)) (__AND__ (__OR__ (apply = (list (car args) (car (cdr args)) ) ) (apply > (list (car args) (car (cdr args))))) (apply >= (cdr args)) )
			)
		)
	)

	(define != (lambda (. args)
		(if (= 2 (len args)) (not (= (car args) (car (cdr args)))) (__AND__ (not (= (car args) (car (cdr args)))) (apply != (cdr args)) )
			)
		)
	)

	(define not (lambda (a) 
			(if a 0 1)
		)
	)

	(define nil '())
	;function while"
    ;(while (< i 10) (= i (+ i 1)))"
	;(define while (lambda (&judge &stm) (
	;	cond (judge (stms stm (while judge stm))) (1 nil)
	;		)
	;	)
	;)


	; macro if
	;(defmacro if
	;	()
	;	((if condition stm1 stm2) (cond (condition stm1) (1 stm2)))
	;	)
	;function if"
    ;(if [judge] [run if pass] [run if not pass])"
	;(define if (lambda (&condition &stm1 &stm2) (cond (condition stm1) (1 stm2))))

	;One bug here"
	;(print (<= 4 3 4))"

	;(remainder 3 4) ->3"
	(define remainder (lambda (a b) 
			(
				if (< a b) a (remainder (- a b) b)
			)
		)
	)
	(define % remainder)


	;list? function will return 1 if it is list"
	(define list? (lambda (a)
			(if (atom? a) 0 1)
		)
	)

	;======================================================================"

	; ================== MATH =================
	; check whether char is digit
	(define charIsDigit (lambda (char)
		(if (or (eq char 0) (eq char 1) (eq char 2) (eq char 3) (eq char 4) (eq char 5) (eq char 6) (eq char 7) (eq char 8)  (eq char 9) )
			1
			0
			)
		))

	; check whether input is integer
	; (isInteger 123) -> 1
	; (isInteger 12.0) -> 0
	; (isInteger 12e3) -> 0 
	(define isInteger (lambda (input)
		(if (null? input) 
			1
			(if (charIsDigit (car input))
				(isInteger (cdr input))
				0
				)
			)
		))
	(define isFloat (lambda (input)
		(define isFloatTest (lambda (input count_of_dot_and_e)
			(if (null? input)
				(if (eq count_of_dot_and_e 1) 1 0)
				(if (> count_of_dot_and_e 1) 0 
					(if (charIsDigit (car input))
						(isFloatTest (cdr input) count_of_dot_and_e)
						(if (or 
								(eq (car input) '.)
								(eq (car input) 'e)
							)
							(isFloatTest (cdr input) (+ count_of_dot_and_e 1))
							0
						)
						)
					)
				)

			))
		(isFloatTest input 0)
		))

	; test whether input is fraction
	; requre quote
	; (isFraction '1/2 )->1
	; (isFraction 1/2) will occur error
	(define isFraction (lambda (input)
		(define isFractionTest (lambda (input count_of_slash)
			(if (null? input)
				(if (eq count_of_slash 1) 1 0)
				(if (charIsDigit (car input)) (isFractionTest (cdr input) count_of_slash)
					(if (eq (car input) '/)
						(isFractionTest (cdr input) (+ count_of_slash 1))
						0
						)
				    )
				)
			))
		(isFractionTest input 0)

		))


	(define +1 (lambda (x) (+ x 1)))

	;============== List ==========================
	;======================================================================"
	;list "
		;get the last element of __list__"
		(define last (lambda (__list__) 
			(if (null? __list__ ) (print "Error...Cannot get last atom of empty list")
				(if (null? (cdr __list__ )) 
						(car __list__ )  
						(last (cdr __list__ ))
					)
				)
			)
		)
		; get the reverse of list
		; (list-reverse '(1 2 3)) -> (3 2 1)
		(define list-reverse (lambda (_list_)
			(define list-reverse (lambda (_list_ result)
				(if (null? _list_) result (list-reverse (cdr _list_) (cons (car _list_) result) ))
				))
			(list-reverse _list_ '())
		))

		;list-length"
		;which can be used to get the length of list"
		(define list-length (lambda (_list_)
			(define list-length-iter (lambda (_list_ count) 
				(if (null? _list_) count (list-length-iter (cdr _list_) (+ count 1))) 
				))
			(if (list? _list_)
				(list-length-iter _list_ 0)
				(print "Error...Function list-length can not be used to get length of non-list type value")
			)
		  )
		)
		(define len list-length)

		;test list-length"
		;(print (list-length '(1 2 3)))"
		;(print (list-length 12))"

		;====================================="
		;list-get"
		;get list at index"
		(define list-get (lambda (_list_ index)
				(if (>= index (list-length _list_))
					(print "Error...Index out of range")
					(if (= index 0)
						(car _list_)
						(list-get (cdr _list_) (- index 1))
					)
				)
			)
		)
		(define list-ref list-get)
		;test list-get"
		;(print (list-get '(12 2 14) 2))"

	; check whether item in _list_
	; (list-membet 'a '(a b c)) -> 1
	(define list-member (lambda (item _list_)
		(if (null? _list_) 0 
			(if (eq (car _list_) item)
				1
				(list-member item (cdr _list_))
				)
			)
		))

	; ('a '(a b c)) -> 1
	(define list-atom-is-member? (lambda (element in_list) 
		(if (null? in_list) 0
			(if (eq? element (car in_list)) 1
				(list-atom-is-member? element (cdr in_list))
			  )
			)
		))

		; ('a '(a b c)) -> 0 return index
		; if not found; return -1
	(define list-atom-index (lambda (element in_list) 
		(define list-atom-index-iter (lambda (in_list result)
			(if (null? in_list) -1
				(if (eq? (car in_list) element) result
					(list-atom-index-iter (cdr in_list) (+ result 1))
					)
				)
			))
		(list-atom-index-iter in_list 0)
		))

	;====================="
	;Function: list-append"
	;(list-append '() 12) -> (12)"
	;(list-append '(1 2) '(14 15)) -> (1 2 (14 15))"
	; (list-append '(1 2 3) 12) -> (1 2 3 12)
	(define list-append (lambda (_list_ append_element)
		(if (null? _list_)
			(cons append_element nil)
			(cons (car _list_) (list-append (cdr _list_) append_element) )
			)
		))
	;(print (list-append '(1 2) '(14 15) ))"

	; (1 2) (3 4) -> (1 2 3 4)
	(define list-combine (lambda (a b)
		(if (null? a)
			(if (null? b)
				'()
				(cons (car b) (list-combine a (cdr b)))
				)
			(cons (car a) (list-combine (cdr a) b) )
			)
		))


	;==============="
	;Function: Range"
	;(range 10)"
	;(range 0 10)"
	;(range 0 10 1)"
	(define range (lambda (arg0 . args) (stms
				(cond 
					((= args '())
						(stms 
							(define begin 0)
							(define end arg0)
							(define interval 1)
							(define output '())
						)
					)
					((= 1 (list-length args))
						(stms 
							(define begin arg0)
							(define end (car args))
							(define interval 1)
							(define output '())
						)
					)
					(1 
						(stms 
							(define begin arg0)
							(define end (car args))
							(define interval (car (cdr args)))
							(define output '())

						)
					) 

				)
				(if (> interval 0 ) 
					(while (< begin end) (stms (set! output (list-append output begin)) (set! begin (+ begin interval))))
					(while (> begin end) (stms (set! output (list-append output begin)) (set! begin (+ begin interval))))
				)
				output
			)
		)
	)
	;Test"
	;(print (range 2 100 1))"

	;============== ATOM ==========================
	; this function can be used to find specific part from atom
	; (atom-find 'Hello 'el) -> 1
	(define atom-find (lambda (_atom_ find_string)
		; Hello He -> 1
		; Hello Ha -> 0
		(define atom-find-test (lambda (_atom_ find_string)
			(if (null? find_string) 1 
				(if (not (eq (car _atom_) (car find_string) ))  
					0
					(atom-find-test (cdr _atom_) (cdr find_string))
					)
				)
			))
		(define atom-find-iter (lambda (_atom_  count)
			(if (null? _atom_) 
				-1 
				(if (atom-find-test _atom_ find_string)
					count
					(atom-find-iter (cdr _atom_) (+ count 1))
					)
				 )
			))
		(atom-find-iter _atom_ 0)
		))

	(define atom-slice (lambda (_atom_ start end)
		; get _atom_[ start : length of _atom_ ]
		(define atom-slice-ahead (lambda (result count)
			(if (eq count start) result (atom-slice-ahead (cdr result) (+ count 1)))
			))
		(define atom-slice-back (lambda (_atom_ result count)
			(if (eq count end) result (atom-slice-back (cdr _atom_) (cons (car _atom_) result) (+ count 1)))
			))

		(let 
			(
				(ahead (atom-slice-ahead _atom_ 0))
				(after (atom-slice-back ahead '() start))
			)
				(list-reverse after)
			) 

		))

	; convert atom to list
	; (atom->list 'Hello)  -> (H e l l o)
	(define atom->list (lambda (atom)
		(define atom->list-iter (lambda (atom result)
			(if (null? atom) result (atom->list-iter (cdr atom) (cons (car atom) result)))
			))
		(list-reverse (atom->list-iter atom '()))
		))

	(define atom-length (lambda (_atom_)
		(define atom-length-iter (lambda (_atom_ count) 
			(if (null? _atom_) count (atom-length-iter (cdr _atom_) (+ count 1)))
			))
		(atom-length-iter _atom_ 0)
	))
	;============== MACRO =========================
	;==============================================
	; check whether match syntax
	(define syntax-match (lambda (const_keywords arg1 test_match)
		; variable_table can be used to save variables and their value
		; (3 4) (stm1 stm2) -> (stm1 3 stm2 4)
		(define syntax-match-iter (lambda (arg1 test_match variable_table)
			; finish
			(if (null? test_match) 
				(if (null? arg1) variable_table 0)
				(if (null? arg1)
					(cons '... (cons '() variable_table))
					(if (eq? (car arg1) (car test_match))
						(if (eq? (list-atom-is-member? (car test_match) const_keywords) 1)
							(syntax-match-iter (cdr arg1) (cdr test_match) variable_table)
							0
							)

						(if (eq? (list-atom-is-member? (car test_match) const_keywords) 1)
								0
								(if (eq? '... (car test_match))
									(cons '... (cons arg1 variable_table))
									(if (list? (car test_match))
										; list
										(syntax-match-iter (cdr arg1) (cdr test_match) (list-combine (syntax-match-iter (car arg1) (car test_match) '()) variable_table))
										(syntax-match-iter (cdr arg1) (cdr test_match) (cons (car test_match) (cons (car arg1) variable_table)))
										)
									)
							)
						)
					)
				)
			))
			(syntax-match-iter arg1 (cdr test_match) '())
		))

	; transfer syntax
	; eg (syntax-transfer  '(stm1 3 stm2 4) '(+ stm1 stm2)) -> (+ 3 4)
	; (add 3 4) -> (+ 3 4)
	; (syntax-transfer '(... (3 4) stm 1 )) '(+ stm ...) -> (+ 1 3 4)
	(define syntax-transfer (lambda (variable_table transfer)
		(define syntax-transfer-iter (lambda (transfer)
			(if (null? transfer) '()
				; check whether (car transfer) is list
				(if (list? (car transfer))
					; if ahead is list
					(cons (syntax-transfer-iter (car transfer))  (syntax-transfer-iter (cdr transfer)) )
					; check whether (car transfer) is number
					(if (number? (car transfer))
						(cons (car transfer) (syntax-transfer-iter (cdr transfer)) )
						(let 
							((index (list-atom-index (car transfer) variable_table)))
							(if (eq? -1 index )
								(cons (car transfer) (syntax-transfer-iter (cdr transfer)))
								; ... support
								(if (and 
										(not (null? (cdr transfer)))
										(eq? (car (cdr transfer)) '...)
										)
									(cons (list-ref variable_table (+ 1 index)) (list-combine (list-ref variable_table (- index 1)) (syntax-transfer-iter (cdr (cdr transfer))) ))
									(cons (list-ref variable_table (+ 1 index)) (syntax-transfer-iter (cdr transfer)))
									)
								)
							)
						)
					)
				)
			))
		(syntax-transfer-iter transfer)
	))

	; args = [macro_name const_keywords pattern_lists arguments]
	(define getmacro (lambda (args)
		(define VARIABLE_TABLE '())
		(define const_keywords (list-ref args 1))
		(define pattern_lists (list-ref args 2))
		(define arguments (list-ref args 3))
		; assign value to var_name
		; if value is not list
		; return 0
		; else
		; return 1
		(define list?= (lambda (value)
			(if (list? value) 
			  (begin 
			  	(set! VARIABLE_TABLE value)
			  	1
			  	)
			   0)
			))
		(define getmacro-iter (lambda (pattern_lists)
			(if (null? pattern_lists) "Error... Does not match"
				(if (eq? 1 (list?= (syntax-match const_keywords arguments (car (car pattern_lists)) )))
					(syntax-transfer VARIABLE_TABLE (car (cdr (car pattern_lists))))
					(getmacro-iter (cdr pattern_lists))
					)
				)
			))
		(getmacro-iter pattern_lists)
		))
	;===================================
		
		(define macro-eg 
		'(add (and) 
			(
				((add stm1 stm2) (+ stm1 stm2))  
				((add stm1 stm2 and stm3) (+ stm1 stm2 stm3) )
			) 
			(3 4 and 5)
		 ) 
		)
		;(display macro-eg)
		;(display (getmacro macro-eg))
	;==============================================
	;==============================================
	; SICP
	; Netween's method for SQRT
	(define abs (lambda (a) 
		(cond 
			((< a 0) (- 0 a)) 
			(1 a)
			)
		)
	)
	; test absolute
	;(display (abs -12))

	; sqrt
	; 允许的误差数
	; sqrt
	; 允许的误差数
	(define __SQRT_ACCURATE__ 0.001)
	(define sqrt (lambda (x)
		(define sqrt-iter (lambda (guess)
	  		(cond ((good-enough? guess) guess)
	      		  (1 (sqrt-iter (improve guess)))
				)
	  		)
		)
		(define improve (lambda (guess)
	  		(average guess (/ x guess)))		
		)
		(define average (lambda (x y)
	  		(/ (+ x y) 2)))
		(define good-enough? (lambda (guess)
	  		(< (abs (- (* guess guess) x)) __SQRT_ACCURATE__)))
  		(sqrt-iter __SQRT_ACCURATE__)))



	; factorial
	(define factorial (lambda (x)
		(define factorial_iter (lambda (outcome count)
		 	(if (== count 1) outcome (factorial_iter (* outcome (- count 1)) (- count 1)))
			;(cond ((== count 1) outcome) (1 (factorial_iter (* outcome (- count 1)) (- count 1))))
			)
		)
		(factorial_iter x x)
		))
	;(display (factorial 6))

	; expt
	; only support 2^3 like 3 must be > 0
	(define expt (lambda (a b)
		(define expt_inter (lambda (result count)
			(if (== count 1) result (expt_inter (* result a) (- count 1)))
			) 
		)
		(if (== b 0) 1 (expt_inter a b)))
	)
	;(display (expt 3 2))
	(define ^ expt)
	(define ** expt)

	; sicp Exercise 1.15
	; sin
	; 允许的sin误差范围
	(define __SIN_ACCURACY__ 0.01)
	(define cube (lambda (x) (* x x x)))
	(define p (lambda (x) (- (* 3 x) (* 4 (cube x)))))
	(define sine (lambda (angle)
		(if (not (> (abs angle) __SIN_ACCURACY__))
	        angle
			(p (sine (/ angle 3.0))))))
	; (display (sine 12))
	(define sin sine)

	(define pi 3.141592653589793)
	;		sin  cos
	;	 tan		 cot
	; 		sec   csc
	; cos(x) = sin(x+pi/2)
	(define cos (lambda (x) (sin (+ x (/ pi 2)))))
	(define sec (lambda (x) (/ 1 (cos x))))
	(define csc (lambda (x) (/ 1 (sin x))))
	(define tan (lambda (x) (/ (sin x) (cos x))))
	(define cot (lambda (x) (/ 1 (tan x))))
	; I didnt use Taylor Series when calculating sin cos tan cot sec csc

	; check whether number is even
	(define even? (lambda (x) (if (= (% x 2) 0) 1 0) ))
	(define odd? (lambda (x) (if (even? x) 0 1) ))


	; GCD
	; General Common Divisor
	(define gcd (lambda (a b)
  		(if (= b 0) a (gcd b (remainder a b)))))
	;(display (gcd 30 20))

	; Newton's method... Deriv
	(define deriv (lambda (f x dx) 
		(/ (- (f (+ x dx)) (f x) ) 
			dx)
		))
	; get derivative of 2*x when x=2
	;(display (deriv (lambda (x) (* 2 x)) 5 0.000001))
	; x^2 when x=5
	;(display (deriv (lambda (x) (^ x 2)) 5 0.000001))

	; 2.1.1
	; function (make-rat numerator denominator)	; construct fraction
	; function (numer x)      					; return numerator of x
	; function (denom x)						; return denominator of x

	; a/b+c/d = (a*d+c*b)/b*d
	(define add-rat (lambda (x y) 
		(make-rat 
			(+ 
				(* (numer x) (denom y))  
				(* (numer y) (denom x))
			)
			(* (denom x) (denom y)) )
		))
	(define sub-rat (lambda (x y) 
		(make-rat
			(- 
				(* (numer x) (denom y))  
				(* (numer y) (denom x))
			)
			(* (denom x) (denom y)) )
		))

	; (a/b)*(c/d) = (a*c) / (b*d)
	(define mul-rat (lambda (x y) 
		(make-rat
			(* (numer x) (numer y)) 
			(* (denom x) (denom y)) 
			)
		))
	; (a/b)/(c/d) -> (a*d)/(b*c)
	(define div-rat (lambda (x y)
		(make-rat
			(* (numer x) (denom y))
			(* (denom x) (numer y))
			)
		))
	; a/b c/d
	(define equal-rat? (lambda (x y)
		(= 
			(* (numer x) (denom y))
			(* (denom x) (numer y))
			)
		))
	(define make-rat (lambda (n d) 
		(let ((g (gcd n d))) (cons (/ n g) (/ d g)))
		))
	(define numer (lambda (x) (car x)))
	(define denom (lambda (x) (cdr x)))
	(define print-rat (lambda (x)
		(display "\n")
		(display (numer x))
		(display "/")
		(display (denom x))
		))

	; map a list
	(define map (lambda (process _list_)
	(if (null? _list_) 
		nil
		(cons (process (car _list_)) (map process (cdr _list_)) )
		)
	))
)