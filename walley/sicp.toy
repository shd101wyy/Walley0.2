
(begin
	(define abs (lambda (a) 
		(cond 
			((< a 0) (- 0 a)) 
			(1 a)
			)
		)
	)
	; test absolute
	;(display (abs -12))

	(define == =)
	; factorial
	(define factorial (lambda (x)
		(define factorial_iter (lambda (outcome count)
		 	(if (== count 1) outcome (factorial_iter (* outcome (- count 1)) (- count 1)))
			;(cond ((== count 1) outcome) (1 (factorial_iter (* outcome (- count 1)) (- count 1))))
			)
		)
		(factorial_iter x x)
		))
	;(display (factorial 6))

	; expt
	; only support 2^3 like 3 must be > 0
	(define expt (lambda (a b)
		(define expt_inter (lambda (result count)
			(if (== count 1) result (expt_inter (* result a) (- count 1)))
			) 
		)
		(if (== b 0) 1 (expt_inter a b)))
	)
	(define ^ expt)
	(define ** expt)
	;(display (expt 3 2))

	; sicp Exercise 1.15
	; sin
	; 允许的sin误差范围
	(define __SIN_ACCURACY__ 0.01)
	(define cube (lambda (x) (* x x x)))
	(define p (lambda (x) (- (* 3 x) (* 4 (cube x)))))
	(define sine (lambda (angle)
		(if (not (> (abs angle) __SIN_ACCURACY__))
	        angle
			(p (sine (/ angle 3.0))))))
	; (display (sine 12))
	(define sin sine)

	(define pi 3.141592653589793)
	;		sin  cos
	;	 tan		 cot
	; 		sec   csc
	; cos(x) = sin(x+pi/2)
	(define cos (lambda (x) (sin (+ x (/ pi 2)))))
	(define sec (lambda (x) (/ 1 (cos x))))
	(define csc (lambda (x) (/ 1 (sin x))))
	(define tan (lambda (x) (/ (sin x) (cos x))))
	(define cot (lambda (x) (/ 1 (tan x))))
	; I didnt use Taylor Series when calculating sin cos tan cot sec csc

	; check whether number is even
	(define even? (lambda (x) (if (= (% x 2) 0) 1 0) ))
	(define odd? (lambda (x) (if (even? x) 0 1) ))

	; GCD
	; General Common Divisor
	(define gcd (lambda (a b)
  		(if (= b 0) a (gcd b (remainder a b)))))
	;(display (gcd 30 20))

	; Newton's method... Deriv
	(define deriv (lambda (f x dx) 
		(/ (- (f (+ x dx)) (f x) ) 
			dx)
		))
	; get derivative of 2*x when x=2
	;(display (deriv (lambda (x) (* 2 x)) 5 0.000001))
	; x^2 when x=5
	;(display (deriv (lambda (x) (^ x 2)) 5 0.000001))

	; 2.1.1
	; function (make-rat numerator denominator)	; construct fraction
	; function (numer x)      					; return numerator of x
	; function (denom x)						; return denominator of x

	; a/b+c/d = (a*d+c*b)/b*d
	(define add-rat (lambda (x y) 
		(/ 
			(+ 
				(* (numer x) (denom y))  
				(* (numer y) (denom x))
			)
			(* (denom x) (denom y)) )
		))
	(define sub-rat (lambda (x y) 
		(/ 
			(- 
				(* (numer x) (denom y))  
				(* (numer y) (denom x))
			)
			(* (denom x) (denom y)) )
		))

	; (a/b)*(c/d) = (a*c) / (b*d)
	(define mul-rat (lambda (x y) 
		(/ 
			(* (numer x) (numer y)) 
			(* (denom x) (denom y)) 
			)
		))
	; (a/b)/(c/d) -> (a*d)/(b*c)
	(define div-rat (lambda (x y)
		(/ 
			(* (numer x) (denom y))
			(* (denom x) (numer y))
			)
		))
	; a/b c/d
	(define equal-rat? (lambda (x y)
		(= 
			(* (numer x) (denom y))
			(* (denom x) (numer y))
			)
		))
	(define make-rat (lambda (n d) (cons n d)))
	(define numer (lambda (x) (car x)))
	(define denom (lambda (x) (cdr x)))
	(define print-rat (lambda (x)
		(display "\n")
		(display (numer x))
		(display "/")
		(display (denom x))
		))

	(define one-half (make-rat 1 2))
	(print-rat one-half)
	

)








