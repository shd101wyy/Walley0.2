
(begin
	(define abs (lambda (a) 
		(cond 
			((< a 0) (- 0 a)) 
			(1 a)
			)
		)
	)
	; test absolute
	(display (abs -12))

	; sqrt
	(define sqrt-iter (lambda (guess x)
  		(cond ((good-enough? guess x) guess)
      		  (1 (sqrt-iter (improve guess x) x))
			)
  		)
	)

	(define improve (lambda (guess x)
  		(average guess (/ x guess)))		
	)

	(define average (lambda (x y)
  		(/ (+ x y) 2)))

	(define good-enough? (lambda (guess x)
  		(< (abs (- (* guess guess) x)) 0.001)))

	(define sqrt (lambda (x)
  		(sqrt-iter 1.0 x)))

	(display (sqrt 2))
)








